<?xml version="1.0" encoding="UTF-8"?>
<!--
    JBoss, Home of Professional Open Source
    Copyright 2014, Red Hat, Inc. and/or its affiliates, and individual
    contributors by the @authors tag. See the copyright.txt in the
    distribution for a full listing of individual contributors.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<!-- Configures the Camel Context-->
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:jdbc="http://www.springframework.org/schema/jdbc"
    xmlns:jolokia="http://www.jolokia.org/jolokia-spring/schema/config"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/jdbc               http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd              http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd              http://camel.apache.org/schema/spring       http://camel.apache.org/schema/spring/camel-spring.xsd">
    <bean class="org.apache.activemq.ActiveMQConnectionFactory" id="jmsConnectionFactory">
        <property name="brokerURL" value="tcp://0.0.0.0:61616?useLocalHost=true"/>
        <property name="userName" value="admin"/>
        <property name="password" value="admin"/>
        <property name="TrustAllPackages" value="true"/>
    </bean>
    <bean class="org.apache.activemq.pool.PooledConnectionFactory" id="pooledConnectionFactory">
        <property name="maxConnections" value="8"/>
        <property name="connectionFactory" ref="jmsConnectionFactory"/>
    </bean>
    <bean class="org.apache.camel.component.jms.JmsConfiguration" id="jmsConfig">
        <property name="connectionFactory" ref="pooledConnectionFactory"/>
        <property name="transacted" value="false"/>
        <property name="concurrentConsumers" value="1"/>
    </bean>
    <bean class="org.apache.activemq.camel.component.ActiveMQComponent" id="activemq">
        <property name="configuration" ref="jmsConfig"/>
    </bean>
    <!-- END AMQ SETUP -->
    <!-- START JDBC SETUP -->
    <bean
        class="org.springframework.jdbc.datasource.DriverManagerDataSource" id="dataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://localhost/widgetstore"/>
        <property name="username" value="root"/>
        <property name="password" value="root"/>
    </bean>
    <!-- <jdbc:initialize-database data-source="dataSource" enabled="true">
        <jdbc:script location="classpath:db-schema.sql"/>
    </jdbc:initialize-database> -->
    <!-- END JDBC SETUP -->
    <bean class="com.vishal.widgetstore.OrderRouteBuilder" id="orderRouteBuilder"/>
    <bean class="com.vishal.widgetstore.aggregators.OrderItemAggregator" id="orderItemAggregator"/>
    <bean class="com.vishal.widgetstore.aggregators.EnrichAggregator" id="enrichAggregator"/>
    <bean
        class="com.vishal.widgetstore.processors.CheckInventoryProcessor" id="checkInventoryProcessor"/>
    <bean
        class="com.vishal.widgetstore.processors.ProcessOrderProcessor" id="processOrderProcessor"/>
    <camelContext id="_camelContext1" xmlns="http://camel.apache.org/schema/spring">
        <routeBuilder ref="orderRouteBuilder"/>
        <dataFormats>
            <json id="jackson" library="Jackson" unmarshalTypeName="com.vishal.widgetstore.model.Order"/>
        </dataFormats>
        <onException useOriginalMessage="true">
            <exception>java.lang.Exception</exception>
            <handled>
                <constant>true</constant>
            </handled>
            <to uri="activemq:queue:invalid_order"/>
        </onException>
        <route id="_webNewOrder">
            <from id="_from2" uri="direct:webNewOrder"/>
            <log id="_logWebNewOrder" message="Got a new order via web: ${body}"/>
            <to id="_to5" uri="activemq:queue:new_order"/>
        </route>
        <route id="_ftpOrder">
            <from id="_from5" uri="file:orders/incoming?noop=true&amp;delay=5000&amp;initialDelay=1000"/>
            <bean beanType="com.vishal.widgetstore.CsvToOrder"
                id="_bean1" method="map"/>
            <log id="_logFtpOrder" message="Got a new order via FTP upload:${body}"/>
            <to id="_to4" uri="activemq:queue:new_order?disableReplyTo=true"/>
        </route>
        <route id="_processOrderItems">
            <from id="_from3" uri="activemq:queue:new_order"/>
            <enrich id="_enrich1" strategyRef="enrichAggregator">
                <constant>direct:splitOrderItems</constant>
            </enrich>
            <process id="_process2" ref="processOrderProcessor"/>
            <to id="_to1" uri="direct:checkCustomerExists"/>
        </route>
        <route id="_splitOrderItems">
            <from id="_from1" uri="direct:splitOrderItems"/>
            <split id="_split1" strategyRef="orderItemAggregator">
                <simple>${body.orderItems}</simple>
                <to id="_to6" uri="direct:checkInventory"/>
            </split>
        </route>
        <route id="_accounting">
            <from id="_from6" uri="activemq:queue:accounting"/>
            <log id="_AccountingLog" message="Customer doesn't exist or order total is greater than $50,000.00: ${body}"/>
            <setBody id="_setBody1">
                <constant>Your order was sent to Accounting for further processing.</constant>
            </setBody>
        </route>
        <route id="_fulfillOrder">
            <from id="_from7" uri="activemq:queue:fulfill_order"/>
            <log id="_validateOrderLog" message="${body}"/>
            <to id="_to2" uri="direct:fulfillOrder"/>
        </route>
        <route id="_invalidOrder">
            <from id="_from8" uri="activemq:queue:invalid_order?disableReplyTo=true"/>
            <log id="_invalidOrderLog" message="Invalid order received: ${body}"/>
        </route>
    </camelContext>
</beans>
